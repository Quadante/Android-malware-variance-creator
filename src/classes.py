import os
import time
import string
import random
import requests
import threading
import mysql.connector
from mysql.connector import Error




class Apk:
    def __init__(self, name, method):
        self.downloadedDir = "/var/www/catchmeifyoucan.tech/malwareHidingSystem/necessaryFiles/apk/"
        self.name = name
        self.method = method
        self.destDir = "/var/www/catchmeifyoucan.tech/malwareHidingSystem/coreSystem/Malware/"
        self.createDir = "mkdir " + str(self.destDir) + str(self.name) + "/"
        self.morphPath = "/var/www/catchmeifyoucan.tech/html/Morph/"
        self.copyFilePath = ""

    def copyApk(self):
        def doCopy():
            os.system(self.createDir)
            copyCommand = "cp " + str(self.downloadedDir) + str(self.name) + ".apk" + " " + str(self.destDir) + str(
                self.name) + "/" + str(self.name) + ".apk"
            os.system(copyCommand)
            print("APK COPIED")

        p = threading.Thread(target=doCopy)
        p.start()
        p.join()
        return str(self.destDir) + str(self.name) + "/"

    def createFile(self):
        os.system("mkdir " + str(self.morphPath) + str(self.name))

    def copyFileForRecompile(self):
        def fileCopyToMorph():
            """self.copyFilePath = "cp -r " + str(self.destDir) + str(self.name) + "/" + str(self.name) + "/ "
                                                self.copyFilePath += str(self.morphPath) + str(self.name) + "/" + str(self.method) + "/"""
            print(str(self.copyFilePath))
            print(str(self.morphPath))
            """copyPath = self.createDir + self.name + "-" + self.method
            print(str(copyPath))
            
            os.system(copyPath)"""
            os.system(self.copyFilePath)
            print("Burada sorun yok")

        p = threading.Thread(target=fileCopyToMorph)
        p.start()
        p.join()

    def copyFileForTransform(self):
        def fileCopyToDir():
            self.copyFilePath = "cp -r " + str(self.destDir) + str(self.name) + "/" + str(self.name) + "/ "
            self.copyFilePath += str(self.destDir) + str(self.name) + "/" + str(self.method) + "/"
            print(str(self.copyFilePath))
            os.system(self.copyFilePath)

        p = threading.Thread(target=fileCopyToDir)
        p.start()
        p.join()


class Decompiler():
    def __init__(self, name, dir):
        self.apkName = name
        self.apkDir = dir
        self.dex2jarDir = "/var/www/catchmeifyoucan.tech/malwareHidingSystem/necessaryFiles/dex2jar-2.0/"

    def apkToSmali(self):
        myDir = os.getcwd()
        os.chdir(self.apkDir)

        def runApkTool():
            apkDecodeCommand = "apktool d " + self.apkName + ".apk"
            os.system(apkDecodeCommand)

        p = threading.Thread(target=runApkTool)
        p.start()
        p.join()
        os.chdir(myDir)

    def getDexFromApk(self):
        myDir = os.getcwd()
        os.chdir(self.apkDir)

        def apkToZip():
            os.system("mv " + str(self.apkName) + ".apk " + str(self.apkName) + ".zip")
            os.system("unzip " + str(self.apkName) + ".zip -d " + str(self.apkName) + "-unzipped")

        p = threading.Thread(target=apkToZip)
        p.start()
        p.join()
        os.system("mv " + str(self.apkName) + ".zip " + str(self.apkName) + ".apk")
        os.system("mkdir " + str(self.apkName) + "-dex2jar")
        os.system("mv " + str(self.apkName) + "-unzipped/classes.dex " + str(self.apkName) + "-dex2jar/classes.dex")
        os.system("rm -rf " + str(self.apkName) + "-unzipped")
        os.chdir(myDir)

    def dex2jar(self):
        myDir = os.getcwd()
        os.chdir(self.apkDir + str(self.apkName) + "-dex2jar/")
        dex2jarCommand = str(self.dex2jarDir) + "d2j-dex2jar.sh classes.dex"

        def runDex2Jar():
            os.system(dex2jarCommand)

        p = threading.Thread(target=runDex2Jar)
        p.start()
        p.join()
        os.chdir(myDir)


class Recompiler():
    def __init__(self, apkName, dirName):
        self.apkName = apkName
        self.apkDir = dirName

    def recompileApk(self):
        myDir = os.getcwd()
        os.chdir(self.apkDir)

        def doRecompile():
            recompileCommand = "apktool b " + self.apkName
            os.system(recompileCommand)

        p = threading.Thread(target=doRecompile())
        p.start()
        p.join()
        os.chdir(myDir)
        return self.apkDir + self.apkName + "/dist/"


class Signer():
    def __init__(self, apkName, apkDir):
        self.aliasName = "catchmeifyoucan"
        self.jarSignerLocation = "/usr/lib/jvm/java-11-openjdk-amd64/bin/"
        self.jarSignerCommand = "jarsigner -storepass vfLax2TwF9YW -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore "
        self.keyStoreDir = "/var/www/catchmeifyoucan.tech/malwareHidingSystem/necessaryFiles/keyStore/key.keystore "
        self.apkName = apkName
        self.apkDir = apkDir
        self.jarSignerCommand += str(self.keyStoreDir) + " " + str(self.apkName) + ".apk " + str(self.aliasName)
        self.zipalignCommand = "/usr/lib/android-sdk/build-tools/debian/zipalign -v 4 " + str(
            self.apkName) + ".apk out.apk"
        # print(self.zipalignCommand)

    def signApk(self):
        myDir = os.getcwd()
        os.chdir(self.apkDir)

        # print(str(self.jarSignerLocation) + self.jarSignerCommand)

        def doSign():
            resignCommand = str(self.jarSignerLocation) + self.jarSignerCommand
            os.system(resignCommand)

        p = threading.Thread(target=doSign)
        p.start()
        p.join()

        def doZipalign():
            os.system(self.zipalignCommand)

        p1 = threading.Thread(target=doZipalign)
        p1.start()
        p1.join()

        os.system("rm -rf " + str(self.apkName) + ".apk")
        os.system("mv out.apk " + str(self.apkName) + ".apk")

        os.chdir(myDir)


class Tester():
    def __init__(self, name, dir):
        self.apkName = name + ".apk"
        self.apkDir = dir
        self.url = "https://www.virustotal.com/vtapi/v2/file/"
        self.scanUrl = self.url + "scan"
        self.reportUrl = self.url + "report"
        self.apiPool = {

        }
        self.report = {
            'isMalware': "",
            str(self.apkName): []
        }

    def isApkMalware(self):
        def scanApk(publicApiKey):
            print("Scanning File: " + str(self.apkDir + self.apkName))
            print("Scan url: " + self.scanUrl)
            params = {'apikey': publicApiKey}
            files = {'file': (str(self.apkName), open(str(self.apkDir + self.apkName), 'rb'))}
            response = requests.post(str(self.scanUrl), files=files, params=params)
            if str(response.status_code) != '204':
                rsc = response.json()['resource']
                return rsc
            else:
                return '204'

        def reportApk(publicApiKey, scanResource):
            # time.sleep(10)
            msg = "Your resource is queued for analysis"
            while msg != 'Scan finished, information embedded':
                print("verbose_msg: " + msg)
                time.sleep(10)
                params = {'apikey': publicApiKey, 'resource': scanResource}
                response = requests.get(self.reportUrl, params=params)
                if response.status_code == 204:
                    return False
                msg = response.json()['verbose_msg']
            return [response.json()['positives'], response.json()['total']]

        for api in self.apiPool:
            print("APK Scanning...")
            resources = scanApk(self.apiPool[api])
            if resources == '204':
                print("API limit expired, changing API...")
                continue
            print("APK Scanned, resources received!\nRecources: " + resources)
            print("APK Reporting...")
            results = reportApk(self.apiPool[api], resources)
            if not results:
                print("API limit expired, changing API...")
                continue
            print("APK Reported, results received!")

            self.report['isMalware'] = 'True'
            self.report[self.apkName] = results
            return self.report


class Database():
    def __init__(self, apkName):
    	self.apkName = apkName
    	self.user = "root"
    	self.database = "catchmeifyoucan"

    def connect(self):
        return mysql.connector.connect(user=self.user, database=self.database)

    def insertApk(self, methodId, positives, total, firstResult):
        cnx  = self.connect()
        cursor = cnx.cursor(buffered=True)
        addApk = """INSERT INTO apktable (APKname) VALUES ('""" + self.apkName + """')"""
        cursor.execute(addApk)
        print("Apk added to database")
        maxid = cursor.lastrowid
        cnx.commit()
        cursor.close()
        cnx.close()
        self.insertMethodResult(maxid, methodId, positives, total, firstResult)

    def insertMethodResult(self, apkId, methodId, positive, total, firstSearch):
    	cnx  = self.connect()
    	cursor = cnx.cursor(buffered=True)
    	addApk = """INSERT INTO results (APKid, mid, firstSearch, positive, total) VALUES (""" + str(apkId) + """, """ + str(methodId) + """, """ + str(firstSearch) + """, """ + str(positive) + """, """ + str(total) + """)"""
    	print(addApk)
    	cursor.execute(addApk)
    	print("Results saved to database")
    	cnx.commit()
    	cursor.close()
    	cnx.close()

    def getResultsOfLastApk(self):
    	cnx  = self.connect()
    	cursor = cnx.cursor(buffered=True)
    	addApk = """SELECT * FROM results WHERE APKid = (select max(APKid) from apktable)"""
    	cursor.execute(addApk)
    	for a in cursor:
    		print(a)
    	cnx.commit()
    	cursor.close()
    	cnx.close()
        #return SELECT * FROM `results` WHERE APKid = (select max(APKid) from apktable)

    def getResultsOfAllApks(self):
        print()


class Analyzer():

    def __init__(self, name, result):
        self.fileName = name
        self.results = [["NONE", result]]
        self.id = -1

    def addToResults(self, transform, res):
        self.results.append(res)

    def showResults(self):
        print(self.results)

    def addToDataBase(self):
        def doAdd():
            print("added")
            return 1

        self.id = doAdd(self.results)


class Transformer():
    def __init__(self, name, dir):
        self.apkName = name
        self.apkDir = dir
        # os.system("mkdir " + dir + "Transformed versions")
        self.morphs = ['Repacking','Method-Name-Transformer']
        # for morph in morphs:
        #    os.system("mkdir " + dir + "Transformed versions/" + morph)
        # METHOD TRANSFORMER VARIABLES
        self.methodNames = {}
        self.unwantedMethodType = [
            ' public ',
            ' static ',
            ' constructor ',
            ' protected '
        ]
        self.allMethods = []
        self.allModifiableMethods = []
        self.method = []

    def randomStrings(self, stringLength=10):
        letters = string.ascii_lowercase
        return ''.join(random.choice(letters) for i in range(stringLength))

    def getListOfFiles(self):
        dirName = self.apkDir + self.apkName + "/smali/"
        print("*************************************\nDIRNAME\n***********************************")
        print(dirName)
        listOfFiles = list()
        for (dirpath, dirnames, filenames) in os.walk(dirName):
            print("ddddsfadlşkfk")
            listOfFiles += [os.path.join(dirpath, file) for file in filenames]

        return listOfFiles

    def methodTransformer(self):
        def findMethods():
            controller = False
            for smaliFile in smaliFileList:
                with open(smaliFile) as fp:
                    for cnt, line in enumerate(fp):
                        controller = False
                        if '.method ' in line:
                            splittedLine = str(line.split(" ")[-1]).split("(")[0]
                            if splittedLine not in self.allMethods and len(splittedLine) > 1:
                                self.allMethods.append(splittedLine)
                                for word in self.unwantedMethodType:
                                    if word in line:
                                        controller = True
                                if not controller:
                                    self.allModifiableMethods.append([splittedLine, smaliFile, cnt])

        def createRandomNames():
            for methods in self.allModifiableMethods:
                nN = self.randomStrings(random.randint(10, 15))
                if nN not in self.allMethods:
                    self.methodNames[methods[0]] = nN
                else:
                    createRandomNames()
                    break

        def changeMethods():
            for method, newName in self.methodNames.items():
                for file in smaliFileList:
                    #print("Method: " + method + " " + file)

                    def doChange():
                        fin = open(file, "rt")
                        fout = open(file[:-6] + "-1.smali", "wt")
                        for line in fin:
                            fout.write(line.replace(method, newName))
                        fin.close()
                        fout.close()

                    p = threading.Thread(target=doChange)
                    p.start()
                    p.join()
                    os.remove(file)
                    os.rename(str(file[:-6] + "-1.smali"), file)

        smaliFileList = self.getListOfFiles()
        findMethods()
        createRandomNames()
        changeMethods()
