import sys
import classes
import json


def addInfToJson(data, phase, name):
    fileName = '/var/www/catchmeifyoucan.tech/html/json/' + name + '.json'
    data[phase] = True
    with open(fileName, 'w') as outfile:
        json.dump(data, outfile)
    outfile.close()


def main():
    fileName = sys.argv[1]
    data = {
        'First Testing': False,
        'Decompiling': False,
        'Method Morphing': False,
        'Recompiling': False,
        'Signing': False,
        'Testing': False,
        'Analyzing': False,
        'Download': False
    }
    """srcPath = "/var/www/catchmeifyoucan.tech/malwareHidingSystem/necessaryFiles/apk/Malware/"
    destPath = "/var/www/catchmeifyoucan.tech/malwareHidingSystem/coreSystem/Malware/"
    pathToApktool = "/var/www/catchmeifyoucan.tech/malwareHidingSystem/necessaryFiles/apktool/"""
    mNew = "/var/www/catchmeifyoucan.tech/malwareHidingSystem/coreSystem/Malware/"
    myTester = classes.Tester(fileName, "/var/www/catchmeifyoucan.tech/malwareHidingSystem/necessaryFiles/apk/")
    testResult = myTester.isApkMalware()
    print(str(testResult[fileName + ".apk"][0]))
    print(str(testResult[fileName + ".apk"][1]))
    count = 0
    if testResult['isMalware']:
        addInfToJson(data, 'First Testing', fileName)
        print("/var/www/catchmeifyoucan.tech/malwareHidingSystem/coreSystem/Malware/" + fileName + '/')
        myAnalyzer = classes.Analyzer(fileName, testResult[fileName + ".apk"])
        myApk = classes.Apk(fileName, "")
        apkDir = myApk.copyApk()
        myDecompiler = classes.Decompiler(fileName, apkDir)
        myDecompiler.apkToSmali()
        myDecompiler.getDexFromApk()
        myDecompiler.dex2jar()
        addInfToJson(data, 'Decompiling', fileName)
        #myApk = classes.Apk(fileName, 'Repacking')
        #myApk.copyFileForTransform()
        print("tranformerden cikti")
        myApk = classes.Apk(fileName, 'Method-Name-Transformer')
        myApk.copyFileForTransform()
        myTransformer = classes.Transformer('Method-Name-Transformer', '/var/www/catchmeifyoucan.tech/malwareHidingSystem/coreSystem/Malware/' + fileName + '/')
        myTransformer.methodTransformer()
        addInfToJson(data, 'Method Morphing', fileName)

        #myRecompiler = classes.Recompiler('Repacking', apkDir)
        #rebuildedApkDir = myRecompiler.recompileApk()
        #mySigner = classes.Signer(fileName, rebuildedApkDir)
        #mySigner.signApk()
        myRecompiler = classes.Recompiler('Method-Name-Transformer', apkDir)
        rebuildedApkDir = myRecompiler.recompileApk()
        addInfToJson(data, 'Recompiling', fileName)
        mySigner = classes.Signer(fileName, rebuildedApkDir)
        mySigner.signApk()
        addInfToJson(data, 'Signing', fileName)

        myTester.apkDir = mNew + fileName + "/Method-Name-Transformer/dist/"
        testResult = myTester.isApkMalware()
        print(myTester.apkDir)
        print("FILE NAME ====== " + fileName)
        print(str(testResult[fileName + ".apk"][0]))
        print(str(testResult[fileName + ".apk"][1]))
        addInfToJson(data, 'Testing', fileName)
        #results = myTester.isApkMalware()
        #myAnalyzer.addToResults(transform, results)
        #myAnalyzer.showResults()
        addInfToJson(data, 'Analyzing', fileName)
            # myApk.createFile()
    """
            for transform in myTransformer.morphs:
                                        print("TRANSFORM METHOD: " + transform)
                                        if count == 0:
                                            addInfToJson(data, 'Decompiling', fileName)
                                            
                                            myApk = classes.Apk(fileName, transform)
                                            myApk.copyFileForTransform()
                                            
                                            addInfToJson(data, 'Method Morphing', fileName)
                                            
                                            
                            
                                            myRecompiler = classes.Recompiler(transform, apkDir)
                                            rebuildedApkDir = myRecompiler.recompileApk()
                                            addInfToJson(data, 'Recompiling', fileName)
                            
                                            mySigner = classes.Signer(transform, rebuildedApkDir)
                                            mySigner.signApk()
                                            addInfToJson(data, 'Signing', fileName)
                                            count += 1
                                        # break"""
    """  
              myTester.apkDir = mNew + fileName + "/" + fileName + "/dist/"
                                              testResult = myTester.isApkMalware()
                                              print(myTester.apkDir)
                                              print("FILE NAME ====== " + fileName)
                                              print(str(testResult[fileName + ".apk"][0]))
                                              print(str(testResult[fileName + ".apk"][1]))
                                              addInfToJson(data, 'Testing', fileName)
                                              #results = myTester.isApkMalware()
                                              #myAnalyzer.addToResults(transform, results)
                                              #myAnalyzer.showResults()
                                              addInfToJson(data, 'Analyzing', fileName)
                                  """
    addInfToJson(data, 'Download', fileName)

if __name__ == '__main__':
    main()
